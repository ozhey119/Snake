{"version":3,"sources":["customHooks.js","Scores.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","Scores","gameState","scores","Object","values","snakes","map","snake","style","backgroundColor","color","className","score","App","options","currentSnakeColor","gameResult","canvasRef","useRef","useState","isConnected","setIsConnected","setGameState","scale","canvas","setCanvas","roomName","setRoomName","mode","setMode","roomInput","setRoomInput","winner","setWinner","socketRef","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","swipeHandlers","useSwipeable","onSwipedLeft","handleKeyDown","code","onSwipedRight","onSwipedUp","onSwipedDown","reset","current","socketIOClient","on","state","keys","length","hasOwnProperty","lastSurvivor","initCanvas","maxWidth","Math","min","multiplier","disconnect","initBlankCanvas","useCallback","context","getContext","fillStyle","fillRect","prevCanvas","setTransform","apple","forEach","body","segment","x","y","beginPath","arc","PI","closePath","fill","e","emit","preventDefault","handleJoinRoom","room","id","margin","onClick","type","placeholder","onChange","target","value","role","tabIndex","onKeyDown","gameBoard","display","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAuBA,SAASA,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGNC,OAJ2B,EACFC,a,UCJdC,EAjBA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACd,IAAKA,EACD,OAAO,KAEX,IAAMC,EAASC,OAAOC,OAAOH,EAAUI,QAAQC,KAAI,SAACC,GAAD,OAC/C,qBAAuBC,MAAO,CAAEC,gBAAiBF,EAAMG,OAASC,UAAU,aAA1E,SAAwFJ,EAAMK,OAApFL,EAAMG,UAEpB,OACI,qCACI,oBAAIC,UAAU,cAAd,qBACA,qBAAKA,UAAU,cAAf,SACKT,QC6LFW,EAnMH,WACR,IAUIC,EAAoBC,EAAmBC,EAVrCC,EAAYC,iBAAO,MADX,EAEwBC,oBAAS,GAFjC,mBAEPC,EAFO,KAEMC,EAFN,OAGoBF,qBAHpB,mBAGPlB,EAHO,KAGIqB,EAHJ,OAIcH,mBAAS,CAAEvB,MAAO,IAAKE,OAAQ,IAAKY,MAAO,UAAWa,MAAO,KAJ3E,mBAIPC,EAJO,KAICC,EAJD,OAKkBN,qBALlB,mBAKPO,EALO,KAKGC,EALH,OAMUR,qBANV,mBAMPS,EANO,KAMDC,EANC,OAOoBV,mBAAS,IAP7B,mBAOPW,EAPO,KAOIC,EAPJ,OAQcZ,qBARd,mBAQPa,EARO,KAQCC,EARD,KASRC,EAAYhB,mBATJ,EFuBX,WAAgC,IAAD,EACYC,mBAASzB,KADrB,mBAC7ByC,EAD6B,KACXC,EADW,KAYpC,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoB1C,KAItB,OADAC,OAAO4C,iBAAiB,SAAUD,GAC3B,kBAAM3C,OAAO6C,oBAAoB,SAAUF,MACjD,IAEIH,EEzBqBM,GAAlB3C,EAVM,EAUNA,OAAQF,EAVF,EAUEA,MAGV8C,EAAgBC,uBAAa,CAC/BC,aAAc,kBAAMC,EAAc,CAAEC,KAAM,eAC1CC,cAAe,kBAAMF,EAAc,CAAEC,KAAM,gBAC3CE,WAAY,kBAAMH,EAAc,CAAEC,KAAM,aACxCG,aAAc,kBAAMJ,EAAc,CAAEC,KAAM,iBAGxCI,EAAQ,WACVvB,IACAL,IACAW,IACAJ,IACAI,KAGJI,qBAAU,WAuCN,OArCAH,EAAUiB,QAAUC,IAAe,2CACnClB,EAAUiB,QAAQE,GAAG,WAAW,WAC5BhC,GAAe,MAEnBa,EAAUiB,QAAQE,GAAG,cAAc,WAC/BhC,GAAe,GACf6B,OAEJhB,EAAUiB,QAAQE,GAAG,aAAa,SAACC,GAC/BhC,EAAagC,MAEjBpB,EAAUiB,QAAQE,GAAG,WAAW,SAACC,GACzBnD,OAAOoD,KAAKD,EAAMjD,QAAQmD,OAAS,IAC/BF,EAAMG,eAAe,iBAAmBtD,OAAOoD,KAAKD,EAAMjD,QAAQmD,OAAS,EAC3EvB,EAAUqB,EAAMI,cAEhBzB,EAAU,WAItBC,EAAUiB,QAAQE,GAAG,YAAY,SAACM,GAC9B1B,IACA,IAAM2B,EAAWC,KAAKC,IAAInE,OAAOE,WAtDpB,KAuDPkE,EAAaJ,EAAW/D,MAAQgE,EACtCnC,EAAU,CACN7B,MAAkB,GAAXgE,EACP9D,OAAQ6D,EAAW7D,OAASiE,EAAa,GACzCrD,MAAOiD,EAAWjD,MAClBa,MAAOoC,EAAWpC,MAAQwC,EAAa,QAG/C7B,EAAUiB,QAAQE,GAAG,cAAc,SAAC3B,GAChCC,EAAYD,MAEhBQ,EAAUiB,QAAQE,GAAG,YAAY,WAC7BH,OAEG,kBAAMhB,EAAUiB,QAAQa,gBAChC,IAEH,IAAMC,EAAkBC,uBACpB,WACI,IAAMC,EAAUlD,EAAUkC,QAAQiB,WAAW,MAG7C,OAFAD,EAAQE,UAAY7C,EAAOd,MAC3ByD,EAAQG,SAAS,EAAG,EAAG9C,EAAO5B,MAAO4B,EAAO1B,QACrCqE,IAEX,CAAC3C,IAGLa,qBAAU,WACNZ,GAAU,SAAA8C,GACN,IAAMX,EAAWC,KAAKC,IAAIlE,EApFb,KAqFPmE,EAAaQ,EAAW3E,MAAQgE,EACtC,MAAO,CACHhE,MAAkB,GAAXgE,EACP9D,OAAQyE,EAAWzE,OAASiE,EAAa,GACzCrD,MAAO6D,EAAW7D,MAClBa,MAAOgD,EAAWhD,MAAQwC,EAAa,SAGhD,CAACnE,EAAOE,IAEXuC,qBAAU,WACU4B,IACRO,aAAahD,EAAOD,MAAO,EAAG,EAAGC,EAAOD,MAAO,EAAG,KAC3D,CAACC,EAAQyC,EAAiBrC,IAE7BS,qBAAU,WACN,GAAIpC,EAAW,CAAC,IACJI,EAAkBJ,EAAlBI,OAAQoE,EAAUxE,EAAVwE,MACVN,EAAUF,IAChB9D,OAAOC,OAAOC,GAAQqE,SAAQ,SAAAnE,GAC1B4D,EAAQE,UAAY9D,EAAMG,MAC1BH,EAAMoE,KAAKD,SAAQ,SAACE,GAAD,OAAaT,EAAQG,SAASM,EAAQC,EAAGD,EAAQE,EAAG,EAAG,SAE9EX,EAAQE,UAAY,MACpBF,EAAQY,YACRZ,EAAQa,IAAIP,EAAMI,EAAI,GAAKJ,EAAMK,EAAI,KAAO,KAAO,EAAG,EAAIjB,KAAKoB,IAC/Dd,EAAQe,YACRf,EAAQgB,OACRhB,EAAQE,UAAY,QACpBF,EAAQG,SAASG,EAAMI,EAAI,GAAKJ,EAAMK,EAAG,GAAK,QAEnD,CAAC7E,EAAWuB,EAAQyC,IAEvB,IAAMpB,EAAgB,SAACuC,GACJ,UAAXA,EAAEtC,KACFZ,EAAUiB,QAAQkC,KAAK,UAAW3D,EAAUE,KAExCwD,EAAEE,gBAA8B,YAAXF,EAAEtC,MAAiC,cAAXsC,EAAEtC,MAAmC,cAAXsC,EAAEtC,MAAmC,eAAXsC,EAAEtC,MACnGsC,EAAEE,iBAENpD,EAAUiB,QAAQkC,KAAK,UAAWD,EAAEtC,KAAMpB,KAI5C6D,EAAiB,SAACC,EAAM5D,GAC1BC,EAAQD,GACRM,EAAUiB,QAAQkC,KAAK,WAAYG,EAAM5D,IA+C7C,MA5Ca,SAATA,GAAmB3B,GAAaA,EAAUI,OAAO6B,EAAUiB,QAAQsC,MACnE1E,EAAoB,qBAAIP,MAAO,CAAEkF,OAAQ,kBAAoB/E,UAAU,cAAnD,2BAA+E,sBAAMH,MAAO,CAAEE,MAAOT,EAAUI,OAAO6B,EAAUiB,QAAQsC,IAAI/E,OAA7D,SAAuET,EAAUI,OAAO6B,EAAUiB,QAAQsC,IAAI/E,YAIjNI,EADAY,EACU,sBAAKf,UAAU,UAAf,UACN,wBACIgF,QAAS,kBAAMzD,EAAUiB,QAAQkC,KAAK,UAAW3D,EAAUE,IAC3DjB,UAAU,aAFd,wBAIA,wBACIgF,QAAS,kBAAMzD,EAAUiB,QAAQkC,KAAK,YAAa3D,IACnDf,UAAU,aAFd,6BAMM,sBAAKA,UAAU,iBAAf,UACN,oBAAIA,UAAU,oBAAd,mBACA,wBACIgF,QAAS,kBAAMJ,EAAerD,EAAUiB,QAAQsC,GAAI,SACpD9E,UAAU,aAFd,kBAKA,wBACIgF,QAAS,kBAAMJ,EAAerD,EAAUiB,QAAQsC,GAAI,YACpD9E,UAAU,aAFd,6BAKA,uBAAOiF,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACV,GAAD,OAAOrD,EAAaqD,EAAEW,OAAOC,UAClF,wBACIL,QAAS,kBAAMJ,EAAezD,EAAW,SACzCnB,UAAU,aAFd,wBAKCS,EAAc,qBAAKT,UAAU,OAAf,uBACf,qBAAKA,UAAU,MAAf,8BAGO,QAAXqB,EACAhB,EAAa,oBAAIL,UAAU,cAAd,wCACNqB,IACPhB,EAAa,qBAAIL,UAAU,cAAd,kCAAiD,sBAAMH,MAAO,CAAEE,MAAOsB,GAAtB,SAAiCA,QAI/F,qBAAKrB,UAAU,aAAf,SACI,8CAAKsF,KAAK,SAASC,SAAS,IAAIC,UAAWtD,GAAmBH,GAA9D,IAA6E/B,UAAU,kBAAvF,UACKI,EAxKAqF,UA0KD,wBAAQ5F,MAAOkB,EAAW,CAAE2E,QAAS,SAAY,CAAEA,QAAS,QACxD1F,UAAU,eACV2F,IAAKrF,EACLrB,MAAK,UAAK4B,EAAO5B,MAAZ,MACLE,OAAM,UAAK0B,EAAO1B,OAAZ,QAETgB,EACAE,EACD,cAAC,EAAD,CAAQf,UAAWA,WCzLpBsG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ba4d83cc.chunk.js","sourcesContent":["// Custom Hook by Dan Abramov\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import React from \"react\";\r\nimport './App.css'\r\n\r\nconst Scores = ({ gameState }) => {\r\n    if (!gameState) {\r\n        return null;\r\n    }\r\n    const scores = Object.values(gameState.snakes).map((snake) =>\r\n        <div key={snake.color} style={{ backgroundColor: snake.color }} className='score-item'>{snake.score}</div>)\r\n\r\n    return (\r\n        <>\r\n            <h2 className='text-shadow'>Scores:</h2>\r\n            <div className='flex-scores'>\r\n                {scores}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scores;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport { useWindowDimensions } from './customHooks';\r\nimport Scores from './Scores';\r\nimport './App.css'\r\nconst MAX_WINDOW_WIDTH = 600; //The true maximum width is around 80% of the const value\r\n\r\nconst App = () => {\r\n    const canvasRef = useRef(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [gameState, setGameState] = useState();\r\n    const [canvas, setCanvas] = useState({ width: 480, height: 480, color: \"oldlace\", scale: 20 })\r\n    const [roomName, setRoomName] = useState();\r\n    const [mode, setMode] = useState();\r\n    const [roomInput, setRoomInput] = useState('');\r\n    const [winner, setWinner] = useState();\r\n    const socketRef = useRef();\r\n    const { height, width } = useWindowDimensions();\r\n    let options, gameBoard, currentSnakeColor, gameResult;\r\n\r\n    const swipeHandlers = useSwipeable({\r\n        onSwipedLeft: () => handleKeyDown({ code: \"ArrowLeft\" }),\r\n        onSwipedRight: () => handleKeyDown({ code: \"ArrowRight\" }),\r\n        onSwipedUp: () => handleKeyDown({ code: \"ArrowUp\" }),\r\n        onSwipedDown: () => handleKeyDown({ code: \"ArrowDown\" })\r\n    });\r\n\r\n    const reset = () => {\r\n        setRoomName();\r\n        setGameState();\r\n        setWinner();\r\n        setMode();\r\n        setWinner();\r\n    }\r\n\r\n    useEffect(() => {\r\n        // for local server: \"http://localhost:3001\"\r\n        socketRef.current = socketIOClient(\"https://lit-caverns-07351.herokuapp.com\");\r\n        socketRef.current.on('connect', function () {\r\n            setIsConnected(true);\r\n        });\r\n        socketRef.current.on('disconnect', function () {\r\n            setIsConnected(false);\r\n            reset();\r\n        });\r\n        socketRef.current.on('gameState', (state) => {\r\n            setGameState(state);\r\n        })\r\n        socketRef.current.on('gameEnd', (state) => {\r\n            if (Object.keys(state.snakes).length > 1) {\r\n                if (state.hasOwnProperty('lastSurvivor') && Object.keys(state.snakes).length > 1) {\r\n                    setWinner(state.lastSurvivor);\r\n                } else {\r\n                    setWinner('Tie');\r\n                }\r\n            }\r\n        })\r\n        socketRef.current.on('initGame', (initCanvas) => {\r\n            setWinner();\r\n            const maxWidth = Math.min(window.innerWidth, MAX_WINDOW_WIDTH);\r\n            const multiplier = initCanvas.width / maxWidth;\r\n            setCanvas({\r\n                width: maxWidth * 0.8,\r\n                height: initCanvas.height / multiplier * 0.8,\r\n                color: initCanvas.color,\r\n                scale: initCanvas.scale / multiplier * 0.8\r\n            })\r\n        })\r\n        socketRef.current.on('joinedRoom', (roomName) => {\r\n            setRoomName(roomName);\r\n        })\r\n        socketRef.current.on('leftRoom', () => {\r\n            reset();\r\n        })\r\n        return () => socketRef.current.disconnect();\r\n    }, []);\r\n\r\n    const initBlankCanvas = useCallback(\r\n        () => {\r\n            const context = canvasRef.current.getContext(\"2d\");\r\n            context.fillStyle = canvas.color;\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n            return context;\r\n        },\r\n        [canvas],\r\n    );\r\n\r\n    useEffect(() => {\r\n        setCanvas(prevCanvas => {\r\n            const maxWidth = Math.min(width, MAX_WINDOW_WIDTH);\r\n            const multiplier = prevCanvas.width / maxWidth;\r\n            return {\r\n                width: maxWidth * 0.8,\r\n                height: prevCanvas.height / multiplier * 0.8,\r\n                color: prevCanvas.color,\r\n                scale: prevCanvas.scale / multiplier * 0.8\r\n            }\r\n        })\r\n    }, [width, height])\r\n\r\n    useEffect(() => {\r\n        const context = initBlankCanvas();\r\n        context.setTransform(canvas.scale, 0, 0, canvas.scale, 0, 0);\r\n    }, [canvas, initBlankCanvas, mode])\r\n\r\n    useEffect(() => {\r\n        if (gameState) {\r\n            const { snakes, apple } = gameState;\r\n            const context = initBlankCanvas();\r\n            Object.values(snakes).forEach(snake => {\r\n                context.fillStyle = snake.color;\r\n                snake.body.forEach((segment) => context.fillRect(segment.x, segment.y, 1, 1))\r\n            })\r\n            context.fillStyle = 'red';\r\n            context.beginPath();\r\n            context.arc(apple.x + 0.5, apple.y + 0.575, 0.425, 0, 2 * Math.PI);\r\n            context.closePath();\r\n            context.fill();\r\n            context.fillStyle = 'green';\r\n            context.fillRect(apple.x + 0.5, apple.y, 0.3, 0.15);\r\n        }\r\n    }, [gameState, canvas, initBlankCanvas])\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.code === \"Space\") {\r\n            socketRef.current.emit('newGame', roomName, mode)\r\n        } else {\r\n            if (e.preventDefault && (e.code === 'ArrowUp' || e.code === 'ArrowDown' || e.code === 'ArrowLeft' || e.code === 'ArrowRight')) {\r\n                e.preventDefault();\r\n            }\r\n            socketRef.current.emit('keyDown', e.code, roomName)\r\n        }\r\n    }\r\n\r\n    const handleJoinRoom = (room, mode) => {\r\n        setMode(mode);\r\n        socketRef.current.emit('joinRoom', room, mode);\r\n    }\r\n\r\n    if (mode === 'room' && gameState && gameState.snakes[socketRef.current.id]) {\r\n        currentSnakeColor = <h2 style={{ margin: '10px 0px -15px' }} className='text-shadow'>Your color is <span style={{ color: gameState.snakes[socketRef.current.id].color }}>{gameState.snakes[socketRef.current.id].color}</span></h2>\r\n    }\r\n\r\n    if (roomName) { // Player entered a room or chose local mode\r\n        options = <div className='options'>\r\n            <button\r\n                onClick={() => socketRef.current.emit('newGame', roomName, mode)}\r\n                className='button-red'>Start game\r\n            </button>\r\n            <button\r\n                onClick={() => socketRef.current.emit('leaveRoom', roomName)}\r\n                className='button-red'>Back to menu\r\n            </button>\r\n        </div>\r\n    } else {\r\n        options = <div className='options center'>\r\n            <h1 className='title text-shadow'>Snake</h1>\r\n            <button\r\n                onClick={() => handleJoinRoom(socketRef.current.id, 'solo')}\r\n                className='button-red'>\r\n                Solo\r\n            </button>\r\n            <button\r\n                onClick={() => handleJoinRoom(socketRef.current.id, 'local2p')}\r\n                className='button-red'>\r\n                Local 2 players\r\n            </button>\r\n            <input type=\"text\" placeholder=\"Room name\" onChange={(e) => setRoomInput(e.target.value)} />\r\n            <button\r\n                onClick={() => handleJoinRoom(roomInput, 'room')}\r\n                className='button-red'>\r\n                Enter room\r\n            </button>\r\n            {isConnected ? <div className='good'>connected</div> : \r\n            <div className='bad'>connecting...</div>}\r\n        </div>\r\n    }\r\n    if (winner === 'Tie') {\r\n        gameResult = <h2 className='text-shadow'>The game ended with a tie!</h2>\r\n    } else if (winner) {\r\n        gameResult = <h2 className='text-shadow'>The last survivor is <span style={{ color: winner }}>{winner}</span></h2>\r\n    }\r\n\r\n    return (\r\n        <div className='snake-game'>\r\n            <div role=\"button\" tabIndex=\"0\" onKeyDown={handleKeyDown} {...swipeHandlers} className='snake-container'>\r\n                {currentSnakeColor}\r\n                {gameBoard}\r\n                <canvas style={roomName ? { display: 'block' } : { display: 'none' }}\r\n                    className='snake-canvas'\r\n                    ref={canvasRef}\r\n                    width={`${canvas.width}px`}\r\n                    height={`${canvas.height}px`}\r\n                />\r\n                {options}\r\n                {gameResult}\r\n                <Scores gameState={gameState} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}